#!/bin/bash
############
set -eux;
    
function show_help()
{
   echo "Update CA Trust Stores";
   echo
   echo "Syntax: cert-updater [-h|a|o|j|k|f] [-p|c]";
   echo
   echo "Default:";
   echo "    Auto-update all stores and generate new keypair if needed";
   echo "    Filter: *_CA.crt";
   echo
   echo "Options:";
   echo "h    Print Help";
   echo "a    Auto-update, update OS, and if JAVA_HOME detected update cacerts, generates new key if default keys found";
   echo "o    Update OS Certificate Store";
   echo "j    Update Java Certificate Store";
   echo "k    Generate new server certificate and key";
   echo "p    Path or URL to where the CA Certs are to add, you can use -f option to filter";
   echo "f    Filter for CA cert import, default: *_CA.crt";
   echo "c    Subject name for new localhost certificate and key";
   echo
}
    
URL="";
SUBJECT="localhost";
JAVA_HOME=${JAVA_HOME:-none};
UPDATE="AUTO";
FILTER="*_CA.crt";
    
function auto_update()
{
   get_certs;
   update_keys;
   update_os;
   update_jvm;
   cleanup;
}
    
function update_keys()
{
    if [ -f "/etc/ssl/default.keys" ];then
        rm /etc/ssl/default.keys;
        openssl dhparam -out /etc/ssl/dhparams.pem ${DH_PARAM_SIZE};
        openssl req -newkey rsa:2048 -x509 -nodes -keyout /etc/ssl/server.key -new -out /etc/ssl/server.pem -subj /CN=${SUBJECT} -sha256 -days 3650;
        PEM_SHA1=$(openssl x509 -noout -fingerprint -sha1 -in /etc/ssl/server.pem | cut -f2 -d"=" | sed "s/://g" | awk '{print tolower($0)}');
        echo "Cert Updater: Keygen finished, Thumbprint: $PEM_SHA1";
    fi;
}
    
function update_jvm()
{
    if [ "${JAVA_HOME}" != "none" ];then
        for CA_CRT in /usr/local/share/ca-certificates/*.crt; do
            CA_NAME=$(openssl x509 -noout -subject -nameopt multiline -in $CA_CRT | sed -n 's/ *commonName *= //p');
            CA_EXISTS=$(${JAVA_HOME}/bin/keytool -list -cacerts -storepass changeit -alias "$CA_NAME" | echo $?);
            if [ "$CA_EXISTS" -eq 0 ];then
                ${JAVA_HOME}/bin/keytool -import -trustcacerts -cacerts \
                    -storepass changeit -noprompt -alias "$CA_NAME" -file $CA_CRT >/dev/null 2>&1 \
                    | echo "Cert Updater: Added certificate to cacert, $CA_CRT";
            else 
                echo "Cert Updater: Certificate ${CA_NAME} already exists, not adding";
            fi;
        done;
    else 
        echo "Cert Updater: JAVA_HOME is undefined in environment, nothing to import";
    fi;
}
    
function update_os()
{
    certs=$(ls /usr/local/share/ca-certificates/*.crt 2> /dev/null | wc -l);
    if [ "${certs}" -ne 0 ];then
        update-ca-certificates;
    else
        echo "Cert Updater: No certificates were found to import";
    fi;
}
    
function get_certs()
{
    ishttp='^(http|https)';
    cd /usr/local/share/ca-certificates;
    if [[ "${URL}" =~ ${ishttp} ]];then
        wget -r -nH -A ${FILTER} "${URL}";
    elif [ -d "${URL}" ];then
        cp -R ${URL}/${FILTER} /usr/local/share/ca-certificates/;
    else
        echo "Cert Updater: ${URL} does not exist, nothing to import";
    fi;
}
    
function cleanup()
{
    cd /usr/local/share/ca-certificates;
    rm -rf /usr/local/share/ca-certificates/*;
}
    
#Run
while getopts ":hp:c:f:aojk" option; do
    case $option in
      h)
        show_help
        exit;;
      p)
        URL=$OPTARG;;
      c)
        SUBJECT=$OPTARG;;
      f)
        FILTER=$OPTARG;;
      a)
        UPDATE="AUTO";;
      o)
        UPDATE="OS";;
      j)
        UPDATE="JVM";;
      k)
        update_keys;;
      \?)
        echo "Error: Invalid option, -h for help"
        exit 2;;
    esac
done

if [ "${UPDATE}" == "AUTO" ];then
    auto_update;
elif [ "${UPDATE}" == "OS" ];then
    get_certs;
    update_os;
    cleanup;
elif [ "${UPDATE}" == "JVM" ];then
    get_certs;
    update_jvm;
    cleanup;
else
    echo "Cert Updater: Invalid update type specified";
    exit 2;
fi;
